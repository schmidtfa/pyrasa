[project]
name = "PyRASA"
dynamic = ["version"]
description = "Spectral parametrization based on IRASA"
readme = "README.md"
license = { text = "BSD-3-Clause" }
authors = [
    {name = "Fabian Schmidt", email = "schmidtfa91@gmail.com"},
    {name = "Thomas Hartmann", email = "thomas.hartmann@th-ht.de"}
]
homepage = "https://github.com/schmidtfa/pyrasa"
classifiers = [
        'Development Status :: 4 - Beta',
        'Intended Audience :: Science/Research',
        'License :: OSI Approved :: BSD License',
        'Operating System :: OS Independent',
        'Programming Language :: Python',
        'Typing :: Typed'
]
keywords=['spectral parametrization', 'oscillations', 'power spectra', '1/f']
requires-python = ">= 3.11"
dependencies = ["numpy", "pandas", "scipy>=1.12"]

[project.optional-dependencies]
mne = ['mne']


[build-system]
requires = ["hatchling", "hatch-regex-commit"]
build-backend = "hatchling.build"

[tool.pixi.project]
channels = ["conda-forge"]
platforms = ["linux-64", "osx-64", "win-64", "osx-arm64"]

[tool.pixi.pypi-dependencies]
pyrasa = { path = ".", editable = true }

[tool.pixi.feature.jupyter.dependencies]
mne = ">=1.7.0,<1.8"
jupyter = ">=1.0.0,<1.1"
ipython = ">=8.26.0,<8.27"
ipykernel = ">=6.29.5,<6.30"
seaborn = ">=0.13.2,<0.14"
matplotlib = ">=3.9.1,<3.10"

[tool.pixi.tasks]
test = "pytest --cov=pyrasa --cov-report=lcov"
lint = "ruff format && ruff check --fix"
lint_ci = "ruff check"
check_types = "mypy pyrasa tests"

[tool.pixi.dependencies]
hatch = ">=1.12.0,<1.13"
ipython = ">=8.26.0,<8.27"
ipykernel = ">=6.29.5,<6.30"
ruff = ">=0.5.2,<0.6"
pre-commit = ">=3.7.1,<3.8"
pytest = ">=8.2.2,<8.3"
pytest-cov = ">=5.0.0,<5.1"
neurodsp = ">=2.2.0,<2.3"
mne = ">=1.7.0,<1.8"
mypy = ">=1.10.1,<2"
pandas-stubs = ">=2.2.2.240603,<3"

[tool.pixi.feature]
py311 = {dependencies = {python="3.11.*"}}
py312 = {dependencies = {python="3.12.*"}}

[tool.pixi.environments]
default = {features = [], solve-group = "default"}
mne = {features = ["mne"], solve-group = "default"}
jupyter = {features = ["jupyter"], solve-group = "default"}
testpy311 = ['py311']
testpy312 = ['py312']

[tool.hatch.version]
source = "regex_commit"
path = "pyrasa/__version__.py"
tag_sign = false

[tool.ruff]
line-length = 120
exclude = ['simulations', 'examples', 'paper']

[tool.ruff.lint]
extend-select = [
    'E',
    'W',
    'I',
    'UP',
    'C90',
    'N',
    'PTH',
    'SIM',
    'TCH',
    'PL',
    'D'
]
ignore = ['PLR0913']

[tool.ruff.format]
quote-style = 'single'

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "--ignore=pyrasa/__version__.py"

[tool.mypy]
disable_error_code = "import-untyped"
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = "pyrasa.*"
disallow_untyped_defs = true
